@using Aion.Components.Theme
@using Aion.Core.Database
@using Microsoft.Extensions.DependencyInjection
@using MudBlazor.Utilities
@using Aion.Components.Shared
@using Aion.Core.Connections
@using Microsoft.AspNetCore.Components.Forms
@using Aion.Components.Shared.Switch

<MudDialog Class="aion-transparent-dialog">
    <DialogContent>
        @if (!string.IsNullOrEmpty(ValidationError))
        {
        <MudAlert Severity="Severity.Error" Class="my-2">@ValidationError</MudAlert>
        }
        <MudTabs Elevation="0" Border="false" Rounded="false" Centered="true"  ApplyEffectsToContainer="true" PanelClass="pa-1 ma-1 rounded" Color="Color.Inherit" ActiveTabClass="bg-primary-50" HideSlider="true" Ripple="false" MaxHeight="32" Style="min-height:32px;"  TabHeaderClass="flex-grow-1 w-100 border-1 pa-1 rounded">
            <MudTabPanel Text="Basic" Class="d-flex flex-grow-1" ToolTip="@null">
                <MudForm Model="@Model" @ref="@_form">
                    <MudStack>
                        <MudTextField @bind-Value="Model.Name"
                                      Label="Connection Name"/>

                        <MudSelect T="DatabaseType"
                                   @bind-Value="Model.Type"
                                   Label="Database Type"
                                   Required="true"
                                   RequiredError="Database type is required">
                            @foreach (var type in ProviderFactory.SupportedDatabases)
                            {
                                <MudSelectItem Value="@type">@type.ToString()</MudSelectItem>
                            }
                        </MudSelect>

                        <MudTextField @bind-Value="Model.Host"
                                      Label="@GetHostLabel()"
                                      Required="true"
                                      RequiredError="Host is required"/>

                        @if (Model.Type == DatabaseType.SQLServer)
                        {
                            <MudTextField @bind-Value="Model.Instance"
                                        Label="Instance Name (optional)"
                                        HelperText="Leave empty for default instance"/>
                        }

                        <MudTextField @bind-Value="Model.Port"
                                      Disabled="@(Model.Type == DatabaseType.SQLServer && !string.IsNullOrEmpty(Model.Instance))"
                                      Label="Port"
                                      Required="true"
                                      RequiredError="Port is required"/>

                        @if (Model.Type == DatabaseType.SQLServer)
                        {
                            <MudSwitch T="bool" @bind-Checked="Model.UseWindowsAuth"
                                      Color="Color.Primary"
                                      Label="Use Windows Authentication"/>
                        }

                        @if (!Model.UseWindowsAuth)
                        {
                            <MudTextField @bind-Value="Model.Username"
                                        Label="Username"
                                        Required="true"
                                        RequiredError="Username is required"/>

                            <MudTextField @bind-Value="Model.Password"
                                        Label="Password"
                                        InputType="InputType.Password"/>
                        }
                        <AionSwitch T="bool" @bind-Value="Model.SaveCredentials"
                                    Color="Color.Primary"
                                    Label="Save Credentials"/>

                    </MudStack>
                </MudForm>
            </MudTabPanel>

            <MudTabPanel Text="Connection String" Class="flex-grow-1">
                <MudStack>
                    <MudTextField @bind-Value="Model.Name"
                                Label="Connection Name"/>
                                
                    <MudTextField @bind-Value="Model.ConnectionString"
                                  Label="Connection String"
                                  Lines="3"
                                  Required="true"
                                  RequiredError="Connection string is required"/>

                    <AionSwitch T="bool" @bind-Value="Model.SaveCredentials"
                                Color="Color.Primary"
                                Label="Save Credentials"/>

                </MudStack>
            </MudTabPanel>
        </MudTabs>
        
        @if (Model.SaveCredentials)
        {
        <MudAlert Severity="Severity.Warning">
            <small>
                Warning: Credentials will be stored unencrypted.
                This is intended for local development connections only.
            </small>
        </MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Disabled="@_isConnecting">Cancel</MudButton>
        <PrimaryActionButton OnClick="Submit" 
                             Text="Connect"
                             Loading="@_isConnecting"
                             LoadingText="Connecting"/>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Inject] private IDatabaseProviderFactory ProviderFactory { get; set; } = default!;
    [Inject] private ConnectionState ConnectionState { get; set; } = default!;
    
    private MudForm? _form;
    private ConnectionDialogModel Model { get; set; } = new();
    private string? ValidationError { get; set; }
    private bool _isConnecting;
    
    private string GetDefaultPort()
    {
        var provider = ProviderFactory.GetProvider(Model.Type);
        return provider.GetDefaultPort().ToString();
    }
    
    private string GetHostLabel() => Model.Type switch
    {
        DatabaseType.SQLServer => "Server",
        _ => "Host"
    };
    
    private async Task Submit()
    {
        if (_form != null)
        {
            await _form.Validate();
            if (_form.IsValid)
            {
                try 
                {
                    _isConnecting = true;
                    StateHasChanged();

                    var connectionString = BuildConnectionString();
                    var provider = ProviderFactory.GetProvider(Model.Type);
                
                    if (!provider.ValidateConnectionString(connectionString, out var error))
                    {
                        ValidationError = error;
                        return;
                    }

                    string name = Model.Name ?? connectionString.Split(";")[0].Split("=")[1];
                    var connection = new ConnectionModel
                    {
                        Name = name,
                        ConnectionString = connectionString,
                        Type = Model.Type,
                        Active = false,
                        SaveCredentials = Model.SaveCredentials
                    };

                    await ConnectionState.ConnectAsync(connection);
                    MudDialog.Close(DialogResult.Ok(connection));
                }
                catch (Exception ex)
                {
                    ValidationError = ex.Message;
                }
                finally
                {
                    _isConnecting = false;
                    StateHasChanged();
                }
            }
        }
    }
    
    private void Cancel() => MudDialog.Cancel();
    
    private string BuildConnectionString()
    {
        if (!string.IsNullOrEmpty(Model.ConnectionString))
            return Model.ConnectionString;
            
        return Model.Type switch
        {
            DatabaseType.PostgreSQL => $"Host={Model.Host};Port={Model.Port};Username={Model.Username};Password={Model.Password}",
            DatabaseType.SQLServer => BuildSqlServerConnectionString(),
            DatabaseType.MySQL => $"Server={Model.Host};Port={Model.Port};User={Model.Username};Password={Model.Password}",
            DatabaseType.SQLite => $"Data Source={Model.Host}",
            _ => throw new ArgumentOutOfRangeException()
        };
    }
    
    private string BuildSqlServerConnectionString()
    {
        var server = Model.Instance != null 
            ? $"{Model.Host}\\{Model.Instance}"
            : $"{Model.Host},{Model.Port}";

        if (Model.UseWindowsAuth)
            return $"Server={server};Integrated Security=true";

        return $"Server={server};User Id={Model.Username};Password={Model.Password}";
    }
    
    protected override void OnInitialized()
    {
        // Set default port when database type changes
        Model.Port = GetDefaultPort();
        base.OnInitialized();
    }
} 