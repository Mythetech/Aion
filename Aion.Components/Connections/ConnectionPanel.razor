@using Aion.Components.AppContextPanel.Commands
@using Aion.Components.Connections.Commands
@using Aion.Components.Connections.Events
@using Aion.Components.Connections.Models
@using Aion.Components.Querying
@using Aion.Core.Connections
@using Aion.Core.Database
@using Aion.Components.Shared
@using Aion.Components.Shared.Snackbar
@using Aion.Components.Theme
@using Aion.Components.Infrastructure.MessageBus
@using Aion.Components.Querying.Commands
@implements IConsumer<Aion.Components.Connections.Commands.ExpandDatabase>
@implements IDisposable

<MudStack Row="true" AlignItems="AlignItems.Center">
    <h3>@Connection.Name</h3>
    <MudSpacer />
    @if (Connection.Active)
    {
        <MudChip Size="Size.Small" Variant="Variant.Text" T="string" Color="Color.Success">Connected</MudChip>
    }
    else
    {
        <MudChip Size="Size.Small" Variant="Variant.Text"  T="string" Color="Color.Error" OnClick="RefreshConnection">Disconnected</MudChip>
    }
</MudStack>

<MudStack Row="true" AlignItems="AlignItems.Center"> 
    <h6>@Connection.Type</h6>
    <MudSpacer />
    <AionIconButton Icon="@AionIcons.Add" Tooltip="Add Database" OnClick="AddDatabase" />
</MudStack>

<MudTreeView T="string" Hover="true" Dense="true" ExpandOnClick="true">
    @foreach (var database in Connection.Databases)
    {
        <MudTreeViewItem Text="@database.Name"
                         Value="@database.Name"
                         @ref="_databases[database.Name]"
                         Icon="@AionIcons.Connection">
            @* Database level *@
            <BodyContent Context="ctx">
                <div class="d-flex align-center justify-space-between w-100">
                    <div class="d-flex align-center">
                        <MudText>@database.Name</MudText>
                    </div>
                    <div>
                        <MudMenu Dense="true" AnchorOrigin="Origin.BottomRight">
                            <ActivatorContent>
                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.MoreVert" />
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem OnClick="@(() => CreateTable(database))">Create Table</MudMenuItem>
                                <MudMenuItem OnClick="@(() => RefreshDatabase(database))">Refresh</MudMenuItem>
                            </ChildContent>
                        </MudMenu>
                    </div>
                </div>
            </BodyContent>
            
            @* Tables level *@
            <ChildContent>
            <MudTreeViewItem  Text="Tables" Icon="@AionIcons.Table" ExpandedChanged="@(() => LoadTables(database))">
                @if (database.TablesLoaded)
                {
                    @foreach (var table in database.Tables)
                    {
                        <MudTreeViewItem Text="@table" Value="@table" Icon="@AionIcons.Table">
                            <BodyContent Context="ctx">
                                <div class="d-flex align-center justify-space-between w-100">
                                    <div class="d-flex align-center">
                                        <MudText>@table</MudText>
                                    </div>
                                    <div>
                                        <MudMenu Dense="true" AnchorOrigin="Origin.BottomRight">
                                            <ActivatorContent>
                                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.MoreVert" />
                                            </ActivatorContent>
                                            <ChildContent>
                                                <MudMenuItem OnClick="@(() => SelectTop1000(database.Name, table))">Select Top 1000</MudMenuItem>
                                                <MudMenuItem OnClick="@(() => EditData(database.Name, table))">Edit Data</MudMenuItem>
                                                <MudMenuItem OnClick="@(() => RefreshTable(database))">Refresh</MudMenuItem>
                                            </ChildContent>
                                        </MudMenu>
                                    </div>
                                </div>
                            </BodyContent>
                            
                            @* Columns level *@
                            <ChildContent>
                            <MudTreeViewItem Text="Columns" Icon="@AionIcons.Column" ExpandedChanged="@(() => LoadColumns(database, table))">
                                @if (database.LoadedColumnTables.Contains(table))
                                {
                                    @foreach (var column in database.TableColumns[table])
                                    {
                                        <MudTreeViewItem Icon="@(column.IsPrimaryKey ? Icons.Material.Filled.Key : AionIcons.Column)">
                                            <BodyContent Context="ctx">
                                                <div class="d-flex align-center">
                                                    <MudText>@column.Name</MudText>
                                                    <MudText Class="ml-2 mud-text-secondary" Style="font-size: 0.8em;">
                                                        @column.DataType@(column.MaxLength.HasValue ? $"({column.MaxLength})" : "")
                                                        @(column.IsNullable ? "NULL" : "NOT NULL")
                                                        @if (column.IsIdentity)
                                                        {
                                                            <span class="ml-1">(Identity)</span>
                                                        }
                                                        @if (!string.IsNullOrEmpty(column.DefaultValue))
                                                        {
                                                            <span class="ml-1">DEFAULT @column.DefaultValue</span>
                                                        }
                                                    </MudText>
                                                </div>
                                            </BodyContent>
                                        </MudTreeViewItem>
                                    }
                                }
                                else
                                {
                                    <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                                }
                            </MudTreeViewItem>
                            </ChildContent>
                        </MudTreeViewItem>
                    }
                }
                else
                {
                    <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                }
            </MudTreeViewItem>
            </ChildContent>
        </MudTreeViewItem>
    }
</MudTreeView>

@code {
    [Parameter] public ConnectionModel Connection { get; set; } = default!;
    [Inject] public ConnectionState ConnectionState { get; set; } = default!;
    [Inject] public QueryState QueryState { get; set; } = default!;
    [Inject] protected ISnackbar Snackbar { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private IMessageBus MessageBus { get; set; } = default!;

    private Dictionary<string, MudTreeViewItem<string>> _databases = new();
    
    private string GetIcon(DatabaseTreeItem item) => item?.ItemType switch
    {
        "database" => AionIcons.Connection,
        "table" => AionIcons.Table,
        "column" => AionIcons.Column,
        "index" => AionIcons.Index,
        _ => AionIcons.Info
    };

    private async Task RefreshConnection()
    {
        await ConnectionState.RefreshDatabaseAsync(Connection);
        if (Connection.Active)
        {
            Snackbar.AddAionNotification($"Reconnected to {Connection.Name}", Severity.Success);
        }
        else
        {
            Snackbar.AddAionNotification("Failed to reconnect", Severity.Error);
        }
    }

    private async Task AddDatabase()
    {
        var options = AionDialogs.CreateDefaultOptions();
        
        var dialog = await DialogService.ShowAsync<CreateDatabaseDialog>("New Database", options);
        var result = await dialog.Result;
        
        if (result.Canceled) return;
        
        var databaseName = (string)result.Data;

        var script = await ConnectionState.GetProvider(Connection.Type).Commands.GenerateCreateDatabaseScript(databaseName);
        var queryResult = await ConnectionState.ExecuteQueryAsync(new QueryModel()
        {
            ConnectionId = Connection.Id,
            DatabaseName = databaseName,
            Query = script
        }, new CancellationToken());
        
        if (!string.IsNullOrWhiteSpace(queryResult.Error))
        {
            Snackbar.AddAionNotification(queryResult.Error, Severity.Error);
            return;
        }
        
        await MessageBus.PublishAsync(new DatabaseCreated(Connection, databaseName));
    }

    private async Task CreateTable(DatabaseModel database)
    {
        var provider = ConnectionState.GetProvider(Connection.Type);
        var script = await provider.Commands.GenerateCreateTableScript(
            database.Name, 
            "NewTable", 
            new[] { 
                new ColumnDefinition("Id", "INTEGER", false, "SERIAL"),
                new ColumnDefinition("Name", "VARCHAR(100)", false)
            });

        var result = await ConnectionState.ExecuteQueryAsync(new QueryModel()
        {
            ConnectionId = Connection.Id,
            DatabaseName = database.Name,
            Query = script
        }, new CancellationToken());
    }

    private async Task SelectTop1000(string databaseName, string tableName)
    {
        var query = QueryState.AddQuery($"Select Top 1000 - {tableName}");
        query.ConnectionId = Connection.Id;
        query.DatabaseName = databaseName;
        query.Query = $"SELECT * FROM \"{tableName}\" LIMIT 1000";

        await MessageBus.PublishAsync(new FocusQuery(query));
    }

    private async Task EditData(string databaseName, string tableName)
    {
        // TODO: Implement table data editor
    }

    private async Task RefreshDatabase(DatabaseModel database)
    {
        await ConnectionState.RefreshDatabaseAsync(Connection);
        await RefreshTreeView();
    }

    private async Task RefreshTable(DatabaseModel database)
    {
        database.TablesLoaded = false;
        await ConnectionState.LoadTablesAsync(Connection, database);
        await RefreshTreeView();
    }

    private async Task LoadTables(DatabaseModel? database)
    {
        if (database == null || database.TablesLoaded)
            return;
        
        await ConnectionState.LoadTablesAsync(Connection, database);
        await RefreshTreeView();
    }

    private async Task LoadColumns(DatabaseModel? database, string table)
    {
        if (database == null || string.IsNullOrWhiteSpace(table))
            return;
        
        if (!database.LoadedColumnTables.Contains(table))
        {
            await ConnectionState.LoadColumnsAsync(Connection, database, table);
            await RefreshTreeView();
        }
    }

    private Task RefreshTreeView()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task Consume(ExpandDatabase message)
    {
        await Task.Yield();
        
        if (_databases.TryGetValue(message.DatabaseName, out var treeview))
        {
            await treeview.ExpandAllAsync();
            await treeview.ReloadAsync();
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        MessageBus.Subscribe(this);
    }

    public void Dispose()
    {
        MessageBus.Unsubscribe(this);

    }

}