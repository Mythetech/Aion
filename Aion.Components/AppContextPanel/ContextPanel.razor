@implements IDisposable
@implements IConsumer<Aion.Components.AppContextPanel.Commands.ActivatePanel>
@using Aion.Components.AppContextPanel.Commands
@using Aion.Components.Theme
@using MouseEvent = MudBlazor.MouseEvent
@using Aion.Components.Shared
@using Aion.Components.Connections
@using Aion.Core.Connections
@using Aion.Components.History
@using Aion.Components.Infrastructure.MessageBus
<MudStack Spacing="0" Row="true" Class="mud-width-full">
<MudStack Spacing="1" Class="app-context-panel mud-width-full" Style="" AlignItems="MudBlazor.AlignItems.Start">
    <AionIconButton Class="p-2 ml-1" Icon="aion-icon" OnClick="@OpenAboutAion" />
    <AionIconButton Class="p-2 ml-1" Icon="@AionIcons.Add" OnClick="AddConnection" Tooltip="Create Connection"  />
    @*Side bar Panel*@
    @foreach (var connection in ConnectionState.Connections)
    {
        <MudBadge Dot="true" Color="@(connection.Active ? Color.Success : Color.Error)" Overlap="true" Class="context-panel-badge-dot" BadgeAriaLabel="@(connection.Active ? "Connected" : "Disconnected")" title="@(connection.Active ? "Connected" : "Disconnected")">
            @{
                var id = connection.Id;
                _connectionLookup[connection?.ConnectionString ?? connection?.Name] = id;
            }
            <ContextPanelItem Id="@id" ActiveId="@_activeItem?.Id" @ref="@_contextPanelItems[id.ToString()]" Title="@connection?.Name" Icon="@AionIcons.Connection" ContextPanelItemClicked="HandleContextPanelItemClicked">
                <PanelContent>
                    <ConnectionPanel Connection="@connection"/>
                </PanelContent>
            </ContextPanelItem>
        </MudBadge>
    }
    
    <MudDivider DividerType="DividerType.Middle" Class="ml-3" Style="width:60%"/>
    
    <ContextPanelItem ActiveId="@_activeItem?.Id" @ref="@_contextPanelItems["history"]" Title="History" Icon="@AionIcons.History" ContextPanelItemClicked="HandleContextPanelItemClicked">
        <PanelContent>
            <HistoryPanel />
        </PanelContent>
    </ContextPanelItem>
    
    <MudSpacer />
    
    <MudMenu ActivationEvent="MouseEvent.MouseOver" AnchorOrigin="Origin.TopRight">
        <ActivatorContent>
            <MudTooltip Text="Color Mode">
                <MudIconButton Class="ml-1" Icon="@(AppState.IsDarkMode ? AionIcons.DarkMode : AionIcons.LightMode)" Color="Color.Primary" Variant="Variant.Text" OnClick="@DarkModeToggled"/>
            </MudTooltip>
        </ActivatorContent>
        <ChildContent>
            <MudToggleGroup T="string" Size="Size.Small" Value="@SelectedColorMode" ValueChanged="HandleColorModeChanged" Style="align-items: center">
                <ToggleIcon Value="light" Icon="@AionIcons.LightMode" Text="Light Mode" />
                <ToggleIcon Value="dark" Icon="@AionIcons.DarkMode" Text="Dark Mode" />
                <ToggleIcon Value="system" Icon="@AionIcons.Round("laptop")" Text="System Default" />
            </MudToggleGroup>
        </ChildContent>
    </MudMenu>
    <MudTooltip Text="Settings">
        <MudIconButton Class="ml-1" Color="Color.Primary" Icon="@AionIcons.Settings" OnClick="OpenSettingsDialog" />
    </MudTooltip>

    <MudIconButton Class="ml-1" Icon="@(AppState.SideBarOpen ? AionIcons.CollapseLeft : AionIcons.ExpandRight)" Color="Color.Inherit" OnClick="@DrawerToggled" />
</MudStack>

<MudStack Class="p-0 mud-width-full" Style="@($"{(!AppState.SideBarOpen ? "width:0px;" : "")}")">
    <MudPaper Class="h-100 w-100" Style="@($"max-width:calc(var(--mud-drawer-width-left) - 3.5rem);max-height:100dvh")" Square="true">
        <MudStack Spacing="3" Class="pa-4 w-100 h-100">
            @if (_activeItem != null)
            {
                <MudStack Row="true" Class="w-100 mr-4" Spacing="0" AlignItems="AlignItems.Center">
                    <MudIcon Class="mr-2 mt-1" Icon="@_activeItem.Icon" Color="Color.Primary" />
                    <MudText Class="text-truncate" Typo="Typo.h6">@_activeItem.Title</MudText>
                    <MudSpacer />
                    <AionIconButton Tooltip="Close" Icon="@AionIcons.Close" Variant="Variant.Text" OnClick="@CloseContextPanel" />
                </MudStack>
                @_activeItem.PanelContent
            }
            else
            {
                <MudStack Row="true" Class="w-100 pa-4">
                    <MudText Typo="Typo.subtitle1">No Item Selected</MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@AionIcons.Close" Variant="Variant.Text" OnClick="@CloseContextPanel" />
                </MudStack>
                <MudText Typo="Typo.subtitle2" Class="mud-text-secondary">Select an item from the side menu</MudText>
            }
        </MudStack>
    </MudPaper>
</MudStack>
</MudStack>
@code {
    [Inject]
    protected GlobalAppState AppState { get; set; } = default!;

    [Inject] protected ConnectionState ConnectionState { get; set; } = default!;

    [Inject]
    protected IDialogService DialogService { get; set; } = default!;

    [Parameter]
    public bool IsDarkMode { get; set; } = false;

    [Parameter]
    public EventCallback DarkModeToggled { get; set; }

    [Parameter]
    public EventCallback DrawerToggled { get; set; }

    [Parameter]
    public string DrawerBackgroundColor { get; set; } = "background-color:#FFFFFF";

    [Inject] public IMessageBus Bus { get; set; } = default!;

    private string SelectedColorMode => AppState.IsDarkMode ? "dark" : "light";

    private ContextPanelItem? _activeItem;

    private Dictionary<string, ContextPanelItem> _contextPanelItems = new();
    private Dictionary<string, Guid> _connectionLookup = new();

    protected async Task HandleColorModeChanged(string s)
    {
        if (!AppState.IsDarkMode && s.Equals("light", StringComparison.OrdinalIgnoreCase))
            return;
        
        if (s.Equals("light", StringComparison.OrdinalIgnoreCase))
        {
            AppState.IsDarkMode = false;            
        }
        else
        {
            AppState.IsDarkMode = true;
        }
        
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        AppState.OnChange += SideBarChanged;
        ConnectionState.ConnectionStateChanged += HandleConnectionStateChanged;
        Bus.Subscribe(this);
    }
    protected void SideBarChanged()
    {
        if (AppState.SideBarOpen)
        {
            _activeItem = null;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        AppState.OnChange -= SideBarChanged;
        ConnectionState.ConnectionStateChanged -= HandleConnectionStateChanged;
        Bus.Unsubscribe(this);
    }

    protected void HandleConnectionStateChanged()
    {
        StateHasChanged();
    }

    protected async Task CloseContextPanel()
    {
        if (AppState.SideBarOpen)
        {
            await DrawerToggled.InvokeAsync();
            _activeItem = null;
            StateHasChanged();
        }
    }

    protected async Task HandleContextPanelItemClicked(ContextPanelItem item)
    {
        if (!AppState.SideBarOpen)
        {
            await DrawerToggled.InvokeAsync();
        }
        else if (_activeItem?.Id == item.Id)
        {
            _activeItem = null;
            await DrawerToggled.InvokeAsync();
        }

        _activeItem = item;
        StateHasChanged();
    }

    protected async Task OpenSettingsDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, BackgroundClass = "aion-dialog", MaxWidth = MaxWidth.Medium };

        //var dialog = await DialogService.ShowAsync<SettingsDialog>("Settings", options);
        //var result = await dialog.Result;
    }

    protected async Task OpenAboutAion()
    {
        var options = AionDialogs.CreateDefaultOptions();

        var dialog = await DialogService.ShowAsync<AboutAion>("About", options);
        var result = await dialog.Result;
    }

    protected async Task AddConnection()
    {
        var options = AionDialogs.CreateDefaultOptions();
        var dialog = await DialogService.ShowAsync<ConnectionDialog>("New Connection", options);
        await dialog.Result;
    }

    public async Task Consume(ActivatePanel message)
    {
        if (!Guid.TryParse(message.Id, out Guid result))
            return;
        
        var panel = _contextPanelItems.Values.FirstOrDefault(x => x.Id == result);

        if (panel == null) return;
        
        if(!panel.IsActive)
            await HandleContextPanelItemClicked(panel);
        
    }
}

