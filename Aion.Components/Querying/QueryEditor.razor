@using Aion.Components.Connections
@using Aion.Components.Infrastructure.MessageBus
@using Aion.Components.Querying.Commands
@using BlazorMonaco.Editor
@using Aion.Components.Shared
@using Aion.Components.Theme
@using Aion.Core.Connections
@using Aion.Core.Queries
@implements IDisposable
@implements Aion.Components.Infrastructure.MessageBus.IConsumer<Aion.Components.Querying.Commands.FocusQuery>

<MudStack>
    <MudStack Row="true" AlignItems="AlignItems.Center">
        <MudTabs Class="mud-width-full flex-grow-1" @bind-ActivePanelIndex="ActiveTabIndex" PanelClass="pa-1" MinimumTabWidth="auto">
            @foreach (var query in State.Queries)
            {
                <MudTabPanel OnClick="@(() => OnTabChanged(query))">
                    <TabContent>
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudText>
                                @query.Name
                            </MudText>
                            <AionIconButton Size="Size.Small" Icon="@AionIcons.Close" Tooltip="Close" OnClick="@(async () => await CloseTab(query))" />
                        </MudStack>
                    </TabContent>
                </MudTabPanel>
            }
        </MudTabs>
        <MudSpacer />
        <AionIconButton Icon="@AionIcons.Add" Tooltip="New Query" OnClick="@(async () => { State.AddQuery(); ActiveTabIndex = State.Queries.Count - 1; await _editor.SetValue(State.Active.Query); })" />
    </MudStack>
    <MudStack Row="true" AlignItems="AlignItems.Center" Class="pa-2">
        <MudSelect T="ConnectionModel"
                   Label="Connection"
                   Value="@SelectedConnection"
                   ValueChanged="@OnConnectionChanged"
                   Margin="Margin.Dense">
            @foreach (var connection in Connections.Connections)
            {
                <MudSelectItem Value="@connection">@connection.Name</MudSelectItem>
            }
        </MudSelect>
        <MudDivider Class="h-100" Vertical="true" DividerType="DividerType.FullWidth"/>
        <MudSelect T="string"
                   Label="Database"
                   Value="@SelectedDatabase"
                   ValueChanged="@OnDatabaseChanged"
                   Disabled="@(SelectedConnection == null)"
                   Margin="Margin.Dense">
            @if (SelectedConnection != null)
            {
                @foreach (var db in SelectedConnection.Databases)
                {
                    <MudSelectItem Value="@db.Name">@db.Name</MudSelectItem>
                }
            }
        </MudSelect>

        <MudSpacer/>
        
        <MudTooltip Text="@($"Transactions ({(State.Active.UseTransaction ? "On" : "Off")})")">
            <MudChip T="string" 
                     Icon="@(State.Active.UseTransaction ? AionIcons.Transaction : AionIcons.TransactionOff)"
                     Variant="@(State.Active.UseTransaction ? Variant.Text : Variant.Outlined)" 
                     @bind-Selected="@State.Active.UseTransaction" 
                     OnClick="() => State.Active.UseTransaction = !State.Active.UseTransaction" Color="Color.Primary">
                Transactions
            </MudChip>
        </MudTooltip>

        <MudTooltip Text="@($"Estimated Query Plan ({(State.Active.IncludeEstimatedPlan ? "On" : "Off")})")">
            <MudChip T="string"
                     Icon="@AionIcons.EstimatedQueryPlan"
                     Variant="@(State.Active.IncludeEstimatedPlan ? Variant.Text : Variant.Outlined)"
                     @bind-Selected="@State.Active.IncludeEstimatedPlan"
                     OnClick="() => State.Active.IncludeEstimatedPlan = !State.Active.IncludeEstimatedPlan" Color="Color.Primary">
                Estimated Query Plan
            </MudChip>
        </MudTooltip>

        <MudTooltip Text="@($"Actual Query Plan ({(State.Active.IncludeEstimatedPlan ? "On" : "Off")})")">
            <MudChip T="string"
                     Icon="@AionIcons.ActualQueryPlan"
                     Variant="@(State.Active.IncludeActualPlan ? Variant.Text : Variant.Outlined)"
                     @bind-Selected="@State.Active.IncludeActualPlan"
                     OnClick="() => State.Active.IncludeActualPlan = !State.Active.IncludeActualPlan" Color="Color.Primary">
                Actual Query Plan
            </MudChip>
        </MudTooltip>
        
        <MudSpacer />

        <RunQueryButton Text="Run"
                        OnClick="RunQuery"
                        Disabled="@(!CanExecuteQuery)"
                        IsExecuting="@(State.Active?.IsExecuting ?? false)"/>
    </MudStack>


    @if (State.Active?.Result?.Error != null)
    {
        <MudAlert Severity="Severity.Error" Class="my-2">@State.Active.Result.Error</MudAlert>
    }

    <StandaloneCodeEditor CssClass="h-100 flex-grow-1" @ref="_editor" ConstructionOptions="DefaultOptions" OnDidInit="HandleInit" OnDidChangeModelContent="UpdateQuery"/>
</MudStack>
@code {
    [Inject] protected QueryState State { get; set; } = default!;
    [Inject] protected ConnectionState Connections { get; set; } = default!;
    [Inject] protected IMessageBus Bus { get; set; } = default!;
    
    private ConnectionModel? SelectedConnection => State.Active?.ConnectionId != null 
        ? Connections.Connections.FirstOrDefault(c => c.Id == State.Active.ConnectionId)
        : null;
        
    private string? SelectedDatabase
    {
        get => State.Active?.DatabaseName;
        set
        {
            if (State.Active != null)
            {
                State.UpdateQueryDatabase(State.Active, value);
            }
        }
    }
    
    private bool CanExecuteQuery => SelectedConnection != null;
    
    private StandaloneCodeEditor? _editor;
    
    private int ActiveTabIndex { get; set; }

    private StandaloneEditorConstructionOptions DefaultOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "sql",
        };
    }

    private CancellationTokenSource? _queryTokenSource;

    protected override void OnInitialized()
    {
        State.StateChanged += StateHasChanged;
        Connections.ConnectionStateChanged += StateHasChanged;
        Bus.Subscribe(this);
        base.OnInitialized();
    }

    public void Dispose()
    {
        State.StateChanged -= StateHasChanged;
        Connections.ConnectionStateChanged -= StateHasChanged;
        Bus.Unsubscribe(this);
        _queryTokenSource?.Dispose();
    }

    private void OnConnectionChanged(ConnectionModel? connection)
    {
        if (State.Active != null && connection != null)
        {
            State.UpdateQueryConnection(State.Active, connection);
        }
    }

    private void OnDatabaseChanged(string? database)
    {
        if (State.Active != null && database != null)
        {
            State.UpdateQueryDatabase(State.Active, database);
        }
    }

    private async Task UpdateQuery(ModelContentChangedEvent evt)
    {
        var text = await _editor.GetValue();
        State.Active.Query = text;
    }

    protected async Task HandleInit()
    {
        if (_editor != null)
        {
            await _editor.SetValue(State.Queries.First().Query);
        }
    }

    private async Task OnTabChanged(QueryModel query)
    {
        State.SetActive(query);
        if (_editor != null)
        {
            await _editor.SetValue(query.Query);
        }
    }

    private async Task CloseTab(QueryModel query)
    {
        bool wasActive = query.Id == State.Active.Id;
        
        State.Remove(query);

        if (wasActive)
        {
            StateHasChanged();
            await OnTabChanged(State.Active);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ActiveTabIndex = State.Queries.FindIndex(q => q.Id == State.Active?.Id);
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RunQuery()
    {
        if (!CanExecuteQuery) return;
        
        var query = State.Active ?? State.Queries.First();

        if (query.IsExecuting)
        {
            _queryTokenSource?.Cancel();
            return;
        }
        
        try
        {
            _queryTokenSource?.Dispose();
            _queryTokenSource = new CancellationTokenSource();
            
            if (_editor != null)
            {
                var currentText = await _editor.GetValue();
                query.Query = currentText;
            }
            
            var result = await Connections.ExecuteQueryAsync(query, _queryTokenSource.Token);
            State.SetResult(query, result);
        }
        finally
        {
            StateHasChanged();
        }
    }

    public async Task Consume(FocusQuery message)
    {
        ActiveTabIndex = State.Queries.FindIndex(q => q.Id == message.Query.Id);
        State.SetActive(message.Query);
        await _editor.SetValue(message.Query.Query);
        StateHasChanged();
    }

}