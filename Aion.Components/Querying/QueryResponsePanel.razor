@using System.Text.Json.Nodes
@using Aion.Components.Infrastructure.MessageBus
@using Aion.Components.Querying.Commands
@using Aion.Components.RequestContextPanel
@using Aion.Components.RequestContextPanel.Commands
@using Aion.Components.Shared
@using Aion.Components.Theme
@using Aion.Core.Queries
@using Blazor.Diagrams;
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@using DocumentFormat.OpenXml.Wordprocessing
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models
@using Aion.Components.Shared.Loaders
@implements IDisposable

@if (State?.Active?.Result != null && (!State?.Active?.IsExecuting ?? false))
{
    QueryResult queryResult = State.Active.Result;
    <MudStack Class="pa-4 h-100 w-100">
        <MudStack Row="true" Class="w-100">
            <MudTabs Class="py-2 px-1" MinimumTabWidth="140px" >
                <MudTabPanel Text="Results" OnClick="() => _activeTab = Results" />
                <MudTabPanel Text="Messages" OnClick="() => _activeTab = Messages" />
                @if (State.Active.EstimatedPlan != null)
                {
                    <MudTabPanel Text="Estimated Plan" OnClick="() => _activeTab = EstimatedPlan" />
                    
                }
                @if (State.Active.ActualPlan != null)
                {
                    <MudTabPanel Text="Actual Plan" OnClick="() => _activeTab = ActualPlan" />
                }
            </MudTabs>
            <MudSpacer />
            <MudTextField 
                T="string"
                @bind-Value="@_search" 
                Class="rounded-xl" 
                Variant="Variant.Text" 
                Margin="Margin.Dense"
                Clearable="true"
                Immediate="true"
                AdornmentIcon="@AionIcons.Filter" 
                Adornment="Adornment.End"
                Placeholder="Find in results..." />
            <MudSpacer />
            <AionIconButton Icon="@AionIcons.Json" Tooltip="Export to Json" OnClick="async () => await Bus.PublishAsync(new ExportResultsToJson(queryResult))"/>
            <AionIconButton Icon="@AionIcons.Csv" Tooltip="Export to Csv" OnClick="async () => await Bus.PublishAsync(new ExportResultsToCsv(queryResult))"/>
            <AionIconButton Icon="@AionIcons.Spreadsheet" Tooltip="Export to Excel" OnClick="async () => await Bus.PublishAsync(new ExportResultsToExcel(queryResult))"/>
        </MudStack>
        @if (_activeTab == Results)
        {
            <MudStack Class="h-100 w-100 overflow-auto flex-shrink-1">
                <MudDataGrid T="Dictionary<string, object>"
                             Items="@State.Active.Result.Rows"
                             Dense="true"
                             Hover="true"
                             Filterable="true"
                             QuickFilter="FilterResults"
                             ColumnResizeMode="ResizeMode.Container">
                    <Columns>
                        @foreach (var col in State.Active.Result.Columns)
                        {
                            <TemplateColumn T="Dictionary<string, object>" Title="@col" Resizable="true">
                                <CellTemplate>
                                    @{
                                        var value = context.Item.GetValueOrDefault(col);
                                    }
                                    @if (value != null && value.ToString().StartsWith('{') && value.ToString().EndsWith('}'))
                                    {
                                        <MudLink Class=" overflow-x-auto d-flex" OnClick="@(async () => await OpenJsonDetailView(State.Active.Name, col, value.ToString()))">@value</MudLink>
                                    }
                                    else
                                    {
                                        <MudText Class=" overflow-x-auto d-flex">@value</MudText>
                                    }
                                </CellTemplate>
                            </TemplateColumn>
                        }
                    </Columns>
                </MudDataGrid>
            </MudStack>
        }
        else if (_activeTab == Messages)
        {
            <MudText>@State.Active.Result.Error</MudText>
        }
        else if (_activeTab == EstimatedPlan)
        {
            <QueryPlanVisualizer Plan="@State.Active.EstimatedPlan" />
        }
        else if (_activeTab == ActualPlan)
        {
            <QueryPlanVisualizer Plan="@State.Active.ActualPlan" />
        }
        <MudText Typo="Typo.caption" Class="mud-text-secondary ml-4">@(State?.Active?.Result?.RowCount ?? 0) Results</MudText>
    </MudStack>
}
else if (State?.Active?.IsExecuting ?? false)
{
    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="3" Class="h-100">
        <WaveLoader />
        <LoadingText Text="Running Query" />
    </MudStack>
}



@code {
    [Inject] protected QueryState State { get; set; } = default!;

    [Inject] protected IMessageBus Bus { get; set; } = default!;

    private string? _search = "";
    private const string Results = "results";
    private string Messages => "messages";
    private string EstimatedPlan => "estimated";
    private string ActualPlan => "actual";

    private string _activeTab = Results;

    [Parameter] public QueryPlan? QueryPlan { get; set; }

    protected override void OnInitialized()
    {
        State.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    public void Dispose()
    {
        State.StateChanged -= StateHasChanged;
    }

    protected async Task OpenJsonDetailView(string queryName, string column, string json)
    {
        await Bus.PublishAsync(new OpenJsonDetailView(new QueryResponseJsonDetail(queryName, column, json)));
    }

    protected bool FilterResults(Dictionary<string, object> item)
    {
        if (string.IsNullOrEmpty(_search))
            return true;
        
        foreach (object value in item.Values)
        {
            if (string.IsNullOrEmpty(value?.ToString())) continue;

            try
            {
                if (((string)value).Contains(_search, StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
            }
            catch{}
        }

        return false;
    }
}