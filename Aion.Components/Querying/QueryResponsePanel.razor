@using System.Text.Json.Nodes
@using Aion.Components.Infrastructure.MessageBus
@using Aion.Components.Querying.Commands
@using Aion.Components.RequestContextPanel
@using Aion.Components.RequestContextPanel.Commands
@using Aion.Components.Shared
@using Aion.Components.Theme
@using Aion.Core.Queries
@implements IDisposable

@if (State?.Active?.Result != null)
{
    QueryResult queryResult = State.Active.Result;
    <MudStack Style="max-height: 95%;">
    <MudTabs Class="py-2 px-1" MinimumTabWidth="140px">
    <MudTabPanel Text="Results">
        <MudStack Class="h-100 w-100">
            <MudStack Row="true">
                <MudSpacer />
                <AionIconButton Icon="@AionIcons.Json" Tooltip="Export to Json" OnClick="async () => await Bus.PublishAsync(new ExportResultsToJson(queryResult))" />
                <AionIconButton Icon="@AionIcons.Csv"  Tooltip="Export to Csv" OnClick="async () => await Bus.PublishAsync(new ExportResultsToCsv(queryResult))" />
                <AionIconButton Icon="@AionIcons.Spreadsheet" Tooltip="Export to Excel" OnClick="async () => await Bus.PublishAsync(new ExportResultsToExcel(queryResult))"/>
            </MudStack>

            <MudDataGrid T="Dictionary<string, object>" 
                        Items="@State.Active.Result.Rows"
                        Dense="true"
                        Hover="true"
                        Filterable="true"
                        ColumnResizeMode="ResizeMode.Container"
                        Class="flex-grow-1">
                <Columns>
                    @foreach (var col in State.Active.Result.Columns)
                    {
                        <TemplateColumn T="Dictionary<string, object>" Title="@col" Resizable="true">
                            <CellTemplate>
                                @{
                                    var value = context.Item.GetValueOrDefault(col);
                                }
                                @if (value != null && value.ToString().StartsWith('{') && value.ToString().EndsWith('}'))
                                {
                                    <MudLink Class=" overflow-x-auto d-flex" OnClick="@(async () => await OpenJsonDetailView(State.Active.Name, col, value.ToString()))">@value</MudLink>
                                }
                                else
                                {
                                    <MudText Class=" overflow-x-auto d-flex">@value</MudText>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    }
                </Columns>
            </MudDataGrid>

        </MudStack>
        </MudTabPanel>
        <MudTabPanel Text="Messages">
            <MudText>@State.Active.Result.Error</MudText>
        </MudTabPanel>
        @if (State.Active.EstimatedPlan != null)
        {
            <MudTabPanel Text="Estimated Plan">
               @State.Active.EstimatedPlan.PlanContent
            </MudTabPanel>
        }
        @if (State.Active.ActualPlan != null)
        {
        <MudTabPanel Text="Actual Plan">
            @State.Active.ActualPlan.PlanContent
        </MudTabPanel>
        }
    </MudTabs>
    </MudStack>
    <MudText Typo="Typo.caption" Class="mud-text-secondary ml-4">@(State?.Active?.Result?.RowCount ?? 0) Results</MudText>
}

@code {
    [Inject] protected QueryState State { get; set; } = default!;

    [Inject] protected IMessageBus Bus { get; set; } = default!;

    protected override void OnInitialized()
    {
        State.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    public void Dispose()
    {
        State.StateChanged -= StateHasChanged;
    }

    protected async Task OpenJsonDetailView(string queryName, string column, string json)
    {
        await Bus.PublishAsync(new OpenJsonDetailView(new QueryResponseJsonDetail(queryName, column, json)));
    }

}