@using System.Reflection
@using System.Text.Json
@using System.Text.Json.Nodes
@using Aion.Components.Connections.Commands
@using Aion.Components.Infrastructure.MessageBus
@using Aion.Components.Querying
@using Aion.Components.Querying.Commands
@using Aion.Components.Theme
@using Aion.Components.Shared
@using Aion.Components.Shared.Dialogs
@using Aion.Components.Shared.JsonTreeView
@using Aion.Core.Queries
@using Aion.Components.Shared.Loaders
@using Aion.Core.Extensions
@implements IDisposable
<MudStack Class="h-100 w-100">
    <MudStack Row="true" Class="w-100 pa-1" AlignItems="AlignItems.Center">
        <MudPaper Elevation="0" Square="true" Width="calc(100% - 3.5rem)" Class="flex-shrink-1 px-1">
            <MudText Class="text-truncate" Typo="Typo.h6">@_queryName</MudText>
        </MudPaper>
        <MudPaper Elevation="0" Square="true" Width="3.5rem">
            <MudTooltip Text="Close">
                <MudIconButton Icon="@AionIcons.Close" Color="Color.Surface" Variant="Variant.Text" OnClick="@PanelClosed"/>
            </MudTooltip>
        </MudPaper>
    </MudStack>
    
    <MudStack Row="true" Justify="Justify.Center" Class="pa-1 align-text-center rounded border-1 mx-4">
        <RequestContextPanelLink Text="Info" IsActive="@(_openTab.Equals("Info"))" OnClick="@(async () => await Open("Info"))" />
        
        @if (!string.IsNullOrWhiteSpace(_code))
        {
            <RequestContextPanelLink Text="Json" IsActive="@(_openTab.Equals(JsonView))" OnClick="@(async () => await Open(JsonView))" />
        }
        
        @if (QueryState?.Active?.Transaction.HasValue ?? false)
        {
            <RequestContextPanelLink Text="Transactions" IsActive="@(_openTab.Equals("Transactions"))" OnClick="@(async () => await Open("Transactions"))" />
        }
    </MudStack>
  
    @if (string.IsNullOrWhiteSpace(_openTab))
    {
        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
            <MudText>No context</MudText>
        </MudStack>
    }
    
    @if (_openTab.Equals("Info", StringComparison.OrdinalIgnoreCase))
    {
        <QueryInfoPanel Query="@QueryState.Active" />
    }
    
    @if (_openTab.Equals(JsonView))
    {
        <JsonViewer
            @ref="_jsonViewer"
            Json="@_code" 
            ViewMode="@_jsonViewerSelection" 
            ColumnName="@_columnName"
            ViewModeChanged="@((mode) => { _jsonViewerSelection = mode; StateHasChanged(); })"
            OnExpandClick="OpenJsonViewerDialog" />
    }
    
    @if (_openTab.Equals("Transactions") && QueryState.Active.Transaction.HasValue)
    {
        <MudStack Class="pa-2 mr-4">
            <KeyValueListItem Key="Id" Value="@QueryState.Active.Transaction.Value.Id" />
            <KeyValueListItem Key="Status" Value="@QueryState.Active.Transaction.Value.Status.ToString()" />
            <KeyValueListItem Key="Start" Value="@QueryState.Active.Transaction.Value.StartTime.ToLocalTime().ToString("G")" />

            <MudDivider Class="pb-4 mt-4" DividerType="DividerType.Middle"/>

            <MudStack Row="true" Class="w-100">
                <MudButton Variant="Variant.Filled" Class="rounded-xl flex-grow-1" Color="Color.Error" OnClick="@(async () => await MessageBus.PublishAsync(new RollbackTransaction(QueryState.Active)))">Rollback</MudButton>
                <MudButton Variant="Variant.Filled" Class="rounded-xl flex-grow-1" Color="Color.Success" OnClick="@(async () => await MessageBus.PublishAsync(new CommitTransaction(QueryState.Active)))">Commit</MudButton>
            </MudStack>
            </MudStack>
    }
    else if (_openTab.Equals("Transactions"))
    {
        <MudText>No Active Transaction</MudText>
    }

</MudStack>
@code {
    [Inject]
    GlobalAppState AppState { get; set; }

    [Inject] protected IDialogService DialogService { get; set; } = default!;

    [Inject] protected QueryState QueryState { get; set; } = default!;

    [Inject] protected IMessageBus MessageBus { get; set; } = default!;

    [Parameter]
    public EventCallback PanelClosed { get; set; } = default!;

    [Parameter]
    public bool IsOpen { get; set; } = false;

    private MudToggleGroup<string> _toggle;

    private JsonViewer? _jsonViewer;

    private string _queryName = "";

    private string _openTab = "";

    private string JsonView => "JsonView";

    private string _code = "";

    private string _columnName = "";

    private string _jsonViewerSelection = "pretty";

    protected override void OnInitialized()
    {
        QueryState.StateChanged += StateHasChanged;
    }

    public async Task Open(string tab, string? args = default)
    {
        _openTab = tab;

        if (tab.Equals(JsonView) && !string.IsNullOrWhiteSpace(args))
        {
            _code = JsonSerializer.Serialize(JsonSerializer.Deserialize<dynamic>(args), new JsonSerializerOptions() { WriteIndented = true });
        }
        
        StateHasChanged();
    }

    public async Task OpenJsonDetailView(QueryResponseJsonDetail columnDetail)
    {
        _openTab = JsonView;

        _queryName = columnDetail.QueryName;

        _columnName = columnDetail.Column;
        
        _code = JsonSerializer.Serialize(JsonSerializer.Deserialize<dynamic>(columnDetail.Json), new JsonSerializerOptions() { WriteIndented = true });

        await Task.Yield();
        
        _jsonViewer?.ReInitializeTree();

        StateHasChanged();
    }

    protected async Task OpenJsonViewerDialog()
    {
        var options = AionDialogs.CreateDefaultOptions(MaxWidth.ExtraExtraLarge);

        var parameters = new DialogParameters
        {
            { "ViewMode", _jsonViewerSelection },
            { "Json", _code }
        };

        await DialogService.ShowAsync<JsonDetailDialog>("Json Viewer", parameters, options);
    }

    public void Dispose()
    {
        QueryState.StateChanged -= StateHasChanged;
        _openTab = "";
        _queryName = "";
        _columnName = "";
        _code = "";
    }
}

